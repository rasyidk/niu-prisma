const express = require("express");
const cors = require("cors"); // Add this line
const app = express();
const port = 3000;

const { GoogleSpreadsheet } = require("google-spreadsheet");
const { JWT } = require("google-auth-library");

// Middleware to parse JSON
app.use(express.json());

// Use CORS middleware
app.use(cors());

// Sample route
app.get("/", (req, res) => {
  res.send("Hello, this is your Express API!");
});

async function getDataNiu(niu) {
  try {
    const response = await fetch(
      `https://kpum.wg.ugm.ac.id/2020/cek-dpt/cekniu.php?niu=${niu}`
    );

    const data = await response.json();
    if (data.nama && data.prodi_nama) {
      var jsonString = JSON.stringify({
        niu: data.niu,
        nama: data.nama,
        prodi: data.prodi_nama,
      });

      return data;
    } else {
      return false;
    }
  } catch (error) {
    console.log(error);
  }
}

async function getNIUfromSHEET(sheet, val) {
  const rows = await sheet.getRows();
  var result = true;
  for (const obj of rows) {
    const rawData = obj._rawData;

    if (rawData[1] == val) {
      result = false;
    }
  }
  return result;
}

async function insertToSheet(sheet, niuData) {
  const now = new Date();

  // Adjust for GMT+7
  const gmtPlus7Hours = now.getHours() + 0;
  now.setHours(gmtPlus7Hours);

  // Get individual components
  const year = now.getFullYear();
  const month = now.getMonth() + 1; // Months are zero-indexed, so add 1
  const day = now.getDate();
  const hours = now.getHours();
  const minutes = now.getMinutes();
  const seconds = now.getSeconds();

  // Formatted string
  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}:${seconds} GMT+7`;

  console.log(formattedDateTime);

  try {
    const rowData = {
      timestamp: formattedDateTime,
      niu: niuData.niu,
      nama: niuData.nama,
      prodi: niuData.prodi_nama,
      // Add more columns as needed
    };
    const addedRow = await sheet.addRow(rowData);

    // Check if the row was added successfully
    if (addedRow !== null) {
      console.log("Row added successfully");
      return true;
    } else {
      console.error("Error adding row to the spreadsheet.");
      return false;
    }
  } catch (error) {
    return false;
  }
}

// Sample POST request
app.post("/api/niu", async (req, res) => {
  const niu = req.body.formData.niu;

  try {
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: "porsenigamatv@porsenigama.iam.gserviceaccount.com",
      key: "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCd/ocoIMRCaRio\nrsLBK1Nto/zms5FGgor76tpgtq0LaRZeFr1YzOVm6m9R3BOPIQmB6KksOEzDsPWK\nY3L2xVGOfupf5tVSwf76tglgwpsLbJsFKN0egTJCMnzyrjQvwnMEs2tvN1uAldUv\nWZ7+g8wOkQGxJCFlpwMOAX7kUx4x6yCTZ2hXlvTinsKelyMEg1+X77d1U6/uq0it\nd7kO5ORFc+3fN4ZNDyYDOZEW+hHRNB3f12NyAyhzE8QVb3sqGs497OBbRc6pWWo5\nvSFHWdmaEq7euuCryznQDO3YUlJL6vzJAujtFHk0n0k8+Vv5GdRQTxCj17hor2a2\nub/IbP29AgMBAAECggEAAbBRSIQFJQKTkWYAzejFJQReNScRM/Q8QRITEHqTYe5X\nH11V28eg4hc6ZmEYUmzTebB/cmoNo//VuAt1FJ8qToAbyDei6xYIwCxG8GJUHuyj\nwYvcxTEzVNLOVBe5lhMZgKDcUp2AXGD9nNpz4RuOiE9Tec29j6UX2sP4U79xsK3i\n5geCQ4mPmiqnsn6c0F0BgGKDKsb5zEVPpMdRRiM38mnNdqwBjVkQ1ek4NebIkqiu\n/ifZ3qK5ckGGbA5iMfv2olgfWHFsg3xx6/Z5PmPIJ7aeV7fgw+3an4HlfEbVp5XZ\noPJhNODtkL2OPgjMDmNQ0vR09UZzCwSFZ+zipbKofwKBgQDV7ERq5ZVlgyGoQJcS\nA0UnTDGlpPDiw1qCh0vk2WZu/+uHkakuRyygZx3JLhZpwuQeiMKDpyx5fogCB+ym\nKaNdOdM+2aEQ5YVqgBPGrcB+SQsQfJ5UNhkowHb8N2Y5PJNLW7mXuKT9GsEA5EUG\nLWRnGdhwTfxJ5A24JvDvr4wtqwKBgQC9EhDK/vPN9w7JLo+TqchpH7NFDemgT6Nl\n0cQFYPxTa0Qa2J9BaxKDD2OMS+3mBXKo+B7qNm4iQ0/CNK+CF51nxGrf+ZiyeAL+\nTBBWFO4gHWadtkSSYKNt78i+laiyZZZ5CeFKKrOpidXiK1+zGfZmWludU7LABrWg\nguMZVxOKNwKBgBsuPPc0GopeYf1lz4wbXEME/F3mmjDFz488L5lxQgGihMOh71QQ\n+Qucbn1sXK6tc5yplcVyjUUWnaNcbGYkbjxfJ4cZ0cw6zXvdsCWTWBzznPNIUjmy\n8flqkvOy+ksVdkWh7u/nJxd9ub4qQtbpF5O+BfEnB4I/9rpKQFzD+lSnAoGACJI4\nFqvGK7Emh3JH6f7JahKY0umVjMHve18uDrxd0/5J4Rmu5o1PEofxEFwk1cercgOF\ni0KabY01oW04A6LEbP7XhX3QMU8Fe7fBCdX7EZOjokSwCR6+ae5z4EfylNvMHYKY\nJv+Wk3n/KziiJwFnTS6Ndq1jrhbfxv4IA48SALMCgYBd89p/2XSQ/v6anvj7FOR9\nvhsQtIiQU4jRu/dEz0zXA+aoOfbiGioFuu73LfG/SI4+jGGF0heshRwivdaREaRj\n1J2LdAR8+OOfeyzToRf0X0qWPT+WhZmQquzcLO7J63Ab2WVPMJUMR/bA66k6f5CV\n6b/C4IgR5NBqpAAQozXGiQ==\n-----END PRIVATE KEY-----\n",
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });

    // Add your Google Sheets credentials
    const spreadsheetId = "1ajISw6BGeqdEhNmWWZunn1e1uUI7A431vHQVSd_nKEw";

    // Replace 'YOUR_GOOGLE_SERVICE_ACCOUNT_EMAIL' and 'YOUR_PRIVATE_KEY' with your Google Service Account credentials

    const doc = new GoogleSpreadsheet(spreadsheetId, serviceAccountAuth);

    await doc.loadInfo(); // loads document properties and worksheets
    console.log(doc.title);
    await doc.use;
    await doc.loadInfo(); // loads document properties and worksheets

    // Replace 'Sheet1' with the name of the sheet in your spreadsheet
    const sheet = doc.sheetsByTitle["Sheet1"];

    const niuData = await getDataNiu(niu);

    if (niuData) {
      const niuAvailability = await getNIUfromSHEET(sheet, niu);
      if (niuAvailability) {
        const insertSuccess = await insertToSheet(sheet, niuData);
        if (insertSuccess) {
          res.status(201).json({
            message: "Data received successfully",
            data: {
              niu: niuData.niu,
              nama: niuData.nama,
              prodi: niuData.prodi_nama,
            },
          });
        }
      } else {
        res.status(404).json({ message: "NIU was inserted to SHEET!" });
      }
    } else {
      res.status(404).json({ message: "NIU Not Found" });
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: error });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
